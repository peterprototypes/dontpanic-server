//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "project_reports")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub project_report_id: u32,
    pub project_id: u32,
    pub project_environment_id: Option<u32>,
    pub title: String,
    pub last_seen: DateTime,
    pub is_seen: i8,
    pub is_resolved: i8,
    pub created: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::project_environments::Entity",
        from = "Column::ProjectEnvironmentId",
        to = "super::project_environments::Column::ProjectEnvironmentId",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    ProjectEnvironments,
    #[sea_orm(has_many = "super::project_report_events::Entity")]
    ProjectReportEvents,
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::ProjectId",
        to = "super::projects::Column::ProjectId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Projects,
}

impl Related<super::project_environments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectEnvironments.def()
    }
}

impl Related<super::project_report_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectReportEvents.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
