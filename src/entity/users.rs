//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: u32,
    pub email: String,
    #[sea_orm(column_type = "Binary(60)")]
    pub password: Vec<u8>,
    pub name: Option<String>,
    pub password_reset_hash: Option<String>,
    pub password_reset_hash_created: Option<DateTime>,
    pub email_verification_hash: Option<String>,
    pub email_verification_hash_created: Option<DateTime>,
    pub totp_secret: Option<String>,
    pub iana_timezone_name: String,
    pub created: DateTime,
    pub pushover_user_key: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::organization_users::Entity")]
    OrganizationUsers,
    #[sea_orm(has_many = "super::project_user_settings::Entity")]
    ProjectUserSettings,
}

impl Related<super::organization_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganizationUsers.def()
    }
}

impl Related<super::project_user_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectUserSettings.def()
    }
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        super::organization_users::Relation::Organizations.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::organization_users::Relation::Users.def().rev())
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        super::project_user_settings::Relation::Projects.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::project_user_settings::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
