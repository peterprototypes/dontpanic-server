//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "projects")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub project_id: u32,
    pub organization_id: u32,
    pub name: String,
    #[sea_orm(unique)]
    pub api_key: String,
    pub slack_bot_token: Option<String>,
    pub slack_channel: Option<String>,
    pub created: DateTime,
    pub slack_webhook: Option<String>,
    pub webhook: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::OrganizationId",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Organizations,
    #[sea_orm(has_many = "super::project_environments::Entity")]
    ProjectEnvironments,
    #[sea_orm(has_many = "super::project_reports::Entity")]
    ProjectReports,
    #[sea_orm(has_many = "super::project_user_settings::Entity")]
    ProjectUserSettings,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::project_environments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectEnvironments.def()
    }
}

impl Related<super::project_reports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectReports.def()
    }
}

impl Related<super::project_user_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectUserSettings.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::project_user_settings::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::project_user_settings::Relation::Projects.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
